from typing import List
import joblib  # type: ignore[import-untyped]
from transformers.kmers_transformer import KmerTransformer
from typing import Literal


class PredictClass:
    def __init__(
        self, model_name: Literal["RandomForest", "SVM"] = "RandomForest"
    ) -> None:
        """Initialize the predictor class."""

        self.model_name = model_name
        if self.model_name == "RandomForest":
            self.model = joblib.load(
                "binary_classifiers/models/random_forest_best_model.pkl"
            )
            self.vectorizer = joblib.load(
                "binary_classifiers/transformers/random_forest_vectorizer.pkl"
            )
        elif self.model_name == "SVM":
            self.model = joblib.load(
                "binary_classifiers/models/support_vector_machine_best_model.pkl"
            )
            self.vectorizer = joblib.load(
                "binary_classifiers/transformers/support_vector_machine_vectorizer.pkl"
            )

        self.kmer_tranformer = KmerTransformer()

    def predict(self, sequence: str) -> str:
        features = self._preprocess(sequence)
        return str(self.model.predict(features)[0])

    def batch_predict(self, sequences: List[str]) -> List[str]:
        features = self._preprocess_batch(sequences)
        predictions = self.model.predict(features)
        return [str(pred) for pred in predictions]

    def _preprocess(self, sequence: str) -> object:
        kmers = self.kmer_tranformer.transform([sequence])
        features = self.vectorizer.transform(kmers)
        return features

    def _preprocess_batch(self, sequences: List[str]) -> object:
        kmers = self.kmer_tranformer.transform(sequences)
        features = self.vectorizer.transform(kmers)
        return features


if __name__ == "__main__":

    predict_class = PredictClass()
    print(
        predict_class.predict(
            "TAATATTACTGGTTTCGCTGTGGGCCCCACACGGGGCCCCCGACAAATAAAAAAGCGAATAACGCGTTGTCGGTTACTTTTGACCACTTTAAGTGCTTTTGATTGCGTGTTTGACACGTCACAATATTCTATATAAACAGCAGGATCTGAATGTTATGGAACATGTCATTGGGAAGCGTGTTTATGGAATATTGTGCTGCTTGGATATTTTGGTGGCAAAATATTGTTTTAATATTCTTATTTACCATTTTATTTTGGATAAATGGAAAGTCGTTTATACTTGCTAGAGGAATTGCCCGCAACGTACGGGAAATTACAGGGCTTTTGTACGGATCTGTTCTTAGCGGAACAGATTCGGAAGGCCTCCGAGTTAAAGATGTTCAAAGAGGCCCAAATGTACATGGTCCTCAGACAGGCCTTCAGACGATCACAGAGGAATAAGGCCCCATGGCCTTCAAAGGTGGCCCAATTCAATATGGACTTGGCACTTACTATAAGTAGGGCCAAGCAGATATCGGAGGAGGCCCAATTGTTAGTTGATTACAAAAAAAAAATTGAAGATGGTTCGCACGAGATCCGGGAGAACGTATGGATCGGCCCAGGCCCTTTCTTGGGGTCGGAAGAGGGCGAGAACGACAGTTCGCTCTCGACCAACACTACTTGGGCCGATTCGGAGGCCCAGTTATCAAGTGAAGACCCGATATGCTCCTCATAGACCTCAGACTAAGATTCATTCGCTCGCTAACACTAGAGTTGTTAGTGGGGCGAACGAGGGCTACGGATGGCATGTATCGGGAGTACCTATTGGTTCTGGGTTTGAAGATAGACATAGTGATAAGATTAAAATTAATTCTTTAAATTTTAAGATGCAGATGATGACATCAGATGCTGGGACCCAAACGACTCTTTGGCACAATGTGTATATGTTTTTAGTAAAAGATAATTCTGGTGGAGCACAAGTCCCAAAATTCAATTCAATATGTATGATGGATAATTCAAACCCGGCAACTGCTGAAATAGACCACGATTCAAAGGATCGTTTTCAGATAATTCGAAGGTGGAGATTTCAATTCAAAGGAAACTCCACGAGGAATGGAGTTGCTTATGATTGTGCAAAAAATAGACATGATTTTAGGGCTAACGTCAAATTAAATTCAATTAGTGAATTTAAGTCTGCGACTGATGGGTCATATGCAAATACCCAGAAGAACGCATACACTATGTATTTCGTACCCCAGACTTATGATATGGTCGTAGACGGTCATTGTACAATGAAATATACGTCAATAGTTTGACCGAAGATACTTACGAAATATTGTTGTGGGAAAATCATTATTTTTATGAATGAATTAAAGGCCGAAGGCCGTGAACAATTGTAAATTGTAATAAATATTGATCAATAAATATTTATCAATAAAATTTATCATTAATACAAACATGGATTACATTTAATTCACTCCATTCATACATATCACTACTAGACAGAGCAGTCTTATAAGACTGATCTGGATTACATAATACAATTGTTGGGATCCCCCCAGGCACTCTAGTTTTTTTACGGTATTTTTCATTAACCGTAAAATCTCTTTGAGATCCTAACAATTCTTTTTTACAAGGTAAAAACTGAAAAGGGATATCATCTATTACATTATAAGACGCGTGATTATCCCAAAAACTAAAATCTACACCCCCACAAAAGTAGTTATGACGCCCTAGACTTCTCGCCCACGCAGTTTTCCCAGTTTTACTGGGTCCTTCAATGATTAATGTCAGTGGGCGATCCGGTTTCTGGTCCTGCATCATCAATAACATTAATATTATTAATATTATAAGCATCGTTGATTTGATCTGCAGTAAGATCTTGTGCCCAGATCAAATCATCTATAGAAATAGACGGTTCAGTTAACTGGACCGCGAAGAGACTTACGGTGAAGATGTTCTCATCTGCCCATTGTTTAATGGACTCCGGTACGCTAGGAAAATGCGTCCATCTGGGTTGATACACAGTTGGGGGTTCAGGCCATTCTCTACTGGCCATGTACTCCAGGTTACGCAACTGGGTTGCGTACGTGTACGGTTGTTCAGTTCTACATCTGGAGAGGAATTCGGACTTGGATGTAGACTCCGTGAGGATTGTTGTCCAGATGGAATCCCTAGACTTCTTAGGACTTCTTCTTGAAGCTCTAAGTAATCCTCGTTCCTCAAATACCCCTCCCTTGGAGATGTAGTCGGCGACATCTGCATCCCTTCGGGGAATCTGGGTATTTGGGTGATAGGTTGAGAGGCCATTTGGGTCCTTGATGTCGAAGAACCTCGGATCCTTGATGTCAATCTTCTTGTCCATCTGGACAAGACAGTGGAGGTGCGGCTCTCCTGATTGGTGTTCCTCCCTGCAGACTCTTGCGTAAGTAGGATCCCAGTTCTTTAATAATTGATAGAGGTAATCGATTAAAAACATTGGGATTAAAGGGCACTGCGGGTAAGTTAAAAAAATAGACTTACCCTGAAGTCTGAAGTTTGAAGCACGTCTAGGCATGTTGACCAGAAGTCAAGGGGAATGAAAAATGCGTTTTAGAGAGGGTTTTCTCAAACTTCTTTCTCTACTATGGTTTTGCGGAGGAACGGAGGAACGGAGGATATAATATAATAATAGAGGACCGTTAGATGAATGACACGTTTCATTCCATCCTACGGTCCACGCGCCATAGCGCGTGGAATGTCGGCCGGCTTTTCAGCGAAACCATA"
        )
    )
